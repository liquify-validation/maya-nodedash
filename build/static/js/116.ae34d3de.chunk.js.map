{"version":3,"file":"static/js/116.ae34d3de.chunk.js","mappings":"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","sources":["containers/A_monitor/activepage.js","../node_modules/lodash/isEmpty.js"],"sourcesContent":["import React, { Component, useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport CustomLineChart from \"./CustomLineChart\";\r\nimport CustomScatterChart from \"./CustomScatterChart\";\r\nimport Modals from \"@iso/components/Feedback/Modal\";\r\nimport Popover from \"@iso/components/uielements/popover\";\r\nimport { getData, setCookie, getCookie } from \"CommonFunctions\";\r\nimport { ModalContent } from \"../Feedback/Modal/Modal.styles\";\r\nimport { Layout, Button, Input, Modal, Switch, Breadcrumb, Select } from \"antd\";\r\nimport \"./styles.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PUBLIC_ROUTE } from \"../../route.constants\";\r\nimport {\r\n  SearchOutlined,\r\n  LeftOutlined,\r\n  RightOutlined,\r\n  HistoryOutlined,\r\n  DotChartOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nimport heartBlank from \"@iso/assets/images/heart-blank.png\";\r\nimport heartFull from \"@iso/assets/images/heart-full.png\";\r\n\r\nimport imageDO from \"@iso/assets/images/do.png\";\r\nimport imageAWS from \"@iso/assets/images/aws.png\";\r\nimport imageGCP from \"@iso/assets/images/gcp.png\";\r\nimport imageAZURE from \"@iso/assets/images/azure.png\";\r\nimport imageHETZNER from \"@iso/assets/images/hetzner.png\";\r\nimport imageVULTR from \"@iso/assets/images/vultr.png\";\r\nimport imageLeaseweb from \"@iso/assets/images/leaseweb.png\";\r\nimport imageDatacamp from \"@iso/assets/images/datacamp.png\";\r\nimport imageComcast from \"@iso/assets/images/comcast.png\";\r\nimport imageChoopa from \"@iso/assets/images/choopa.png\";\r\nimport imageChartercoms from \"@iso/assets/images/chartercoms.png\";\r\nimport imageATandT from \"@iso/assets/images/atandt.png\";\r\nimport imageZenlayer from \"@iso/assets/images/zenlayer.png\";\r\nimport imageAljeel from \"@iso/assets/images/Aljeel.png\";\r\nimport imageHostinger from \"@iso/assets/images/Hostinger.png\";\r\n\r\nimport binance from \"@iso/assets/images/binance.png\";\r\nimport eth from \"@iso/assets/images/eth.png\";\r\nimport bitcoin from \"@iso/assets/images/bitcoin.png\";\r\nimport litecoin from \"@iso/assets/images/litecoin.png\";\r\nimport bitcoincash from \"@iso/assets/images/bitcoincash.png\";\r\nimport dogecoin from \"@iso/assets/images/dogecoin.png\";\r\nimport gaia from \"@iso/assets/images/atom.png\";\r\nimport avax from \"@iso/assets/images/avax.png\";\r\nimport bsc from \"@iso/assets/images/bsc.png\";\r\n\r\nimport thornode from \"@iso/assets/images/thornode.svg\";\r\n\r\nimport blockIcon from \"@iso/assets/images/overview/block_icon.svg\";\r\nimport highTradingIcon from \"@iso/assets/images/overview/24high_trading.svg\";\r\nimport lowTradingIcon from \"@iso/assets/images/overview/24low_trading.svg\";\r\nimport bondIcon from \"@iso/assets/images/overview/Bond_icon.svg\";\r\nimport chartLineIcon from \"@iso/assets/images/overview/chartLineIcon.svg\";\r\nimport churnsIcon from \"@iso/assets/images/overview/churns_icon.svg\";\r\nimport marcketCapIcon from \"@iso/assets/images/overview/marcket_Cap.svg\";\r\nimport mcapRankIcon from \"@iso/assets/images/overview/mcap_rank.svg\";\r\nimport runeUsdtIcon from \"@iso/assets/images/overview/rune_usdt.svg\";\r\nimport timeIcon from \"@iso/assets/images/overview/time_icon.svg\";\r\nimport totalSupplyIcon from \"@iso/assets/images/overview/total_supply.svg\";\r\nimport verticalTopIcon from \"@iso/assets/images/overview/vertical-align-top.svg\";\r\nimport filterIcon from \"@iso/assets/images/overview/filter.svg\";\r\nimport loadingIcon from \"@iso/assets/images/overview/loading.png\";\r\nimport githubIcon from \"@iso/assets/images/overview/github_link_icon.svg\";\r\nimport twitterIcon from \"@iso/assets/images/overview/twitter_link_icon.svg\";\r\nimport liquifyLogo from \"@iso/assets/images/overview/liquify_logo.svg\";\r\n\r\nimport threeDotsIcon from \"@iso/assets/images/overview/dots_three_circle.svg\";\r\nimport powerIcon from \"@iso/assets/images/overview/power.svg\";\r\nimport activeIcon from \"@iso/assets/images/overview/active_icon.svg\";\r\nimport arrowDownIcon from \"@iso/assets/images/overview/arrow-down.svg\";\r\n\r\nimport VisibleColumn from \"@iso/components/VisibleColumn/VisibleColumn\";\r\nconst leaveIcon = (\r\n  <svg\r\n    style={{ marginTop: 5 }}\r\n    focusable=\"false\"\r\n    preserveAspectRatio=\"xMidYMid meet\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    fill=\"currentColor\"\r\n    width=\"20\"\r\n    height=\"20\"\r\n    viewBox=\"0 0 30 30\"\r\n    aria-hidden=\"true\"\r\n    className=\"sfg\"\r\n  >\r\n    <path d=\"M6,30H18a2.0023,2.0023,0,0,0,2-2V25H18v3H6V4H18V7h2V4a2.0023,2.0023,0,0,0-2-2H6A2.0023,2.0023,0,0,0,4,4V28A2.0023,2.0023,0,0,0,6,30Z\"></path>\r\n    <path d=\"M20.586 20.586L24.172 17 10 17 10 15 24.172 15 20.586 11.414 22 10 28 16 22 22 20.586 20.586z\"></path>\r\n  </svg>\r\n);\r\nconst { Header, Footer, Content } = Layout;\r\n\r\nconst headerStyle = {\r\n  cursor: \"pointer\",\r\n  padding: \"12px 15px\",\r\n  fontSize: 15,\r\n  color: \"#ffffff\",\r\n  backgroundColor: \"rgba(24, 34, 51, 0.4)\",\r\n  height: 55,\r\n  fontWeight: 600,\r\n};\r\nconst tdStyle = {\r\n  minWidth: 60,\r\n  textAlign: \"right\",\r\n  fontSize: 14,\r\n  padding: \"10px 15px\",\r\n};\r\nconst trStyle = { height: 45 };\r\nconst iconStyle = {\r\n  minWidth: 25,\r\n  padding: 5,\r\n  paddingLeft: 10,\r\n  paddingRight: 10,\r\n};\r\n\r\nasync function copyToClipWithPopup(msg, ip) {\r\n  copyToClipboard(ip);\r\n  popUpModal(msg, ip);\r\n}\r\n\r\nconst copyToClipboard = (str) => {\r\n  if (navigator && navigator.clipboard && navigator.clipboard.writeText)\r\n    return navigator.clipboard.writeText(str);\r\n  return Promise.reject(\"The Clipboard API is not available.\");\r\n};\r\n\r\nfunction popUpModal(msg, ip) {\r\n  Modals.info({\r\n    title: <h3>Success</h3>,\r\n    content: (\r\n      <ModalContent>\r\n        <p>\r\n          <strong>{`${msg} `}</strong> {`${ip}`}\r\n        </p>\r\n      </ModalContent>\r\n    ),\r\n    onOk() {},\r\n    okText: \"OK\",\r\n    cancelText: \"Cancel\",\r\n    className: \"feedback-modal\",\r\n  });\r\n}\r\n\r\nconst SortIcon = ({ column, sortBy, sortDirection }) => {\r\n  if (sortBy === column) {\r\n    return (\r\n      <img\r\n        className={`sort-icon ${sortDirection === \"desc\" ? \"down\" : \"up\"}`}\r\n        src={arrowDownIcon}\r\n        width={12}\r\n      />\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nconst Icons = ({ address, ip_address, addToFav, whichHeart }) => {\r\n  const firstURL = `https://thornode.ninerealms.com/thorchain/node/${address}`;\r\n  const secondURL = `https://viewblock.io/thorchain/address/${address}`;\r\n  return (\r\n    <span style={{ height: 20, marginLeft: 5 }} className=\"icons-wrapper\">\r\n      <Popover content={\"Explore Node\"} trigger=\"hover\">\r\n        <a\r\n          href={secondURL}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          style={{ marginLeft: 5 }}\r\n        >\r\n          <svg\r\n            focusable=\"false\"\r\n            preserveAspectRatio=\"xMidYMid meet\"\r\n            style={{ verticalAlign: \"middle\" }}\r\n            width=\"14\"\r\n            height=\"14\"\r\n            viewBox=\"0 0 14 14\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M8.21201 6.12094C7.93815 5.79037 7.59622 5.52244 7.20939 5.33531C6.82257 5.14818 6.3999 5.04623 5.97006 5.03638C5.54022 5.02653 5.11326 5.10902 4.71815 5.27823C4.32303 5.44745 3.969 5.69944 3.68006 6.01712L1.96996 7.89664C1.45171 8.48651 1.18641 9.25576 1.23118 10.0387C1.27595 10.8217 1.62723 11.5557 2.20934 12.0827C2.79146 12.6097 3.55784 12.8875 4.34342 12.8562C5.12901 12.825 5.87094 12.4872 6.40942 11.9157L7.38417 10.8444\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"1.2\"\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n            />\r\n            <path\r\n              d=\"M5.39864 7.52442C5.63159 7.8849 5.93954 8.19119 6.3016 8.42251C6.66366 8.65384 7.07135 8.80479 7.49704 8.86513C7.92272 8.92546 8.35644 8.89377 8.76876 8.77221C9.18109 8.65064 9.56238 8.44204 9.88678 8.16056L11.8067 6.49526C12.3909 5.97045 12.7451 5.23775 12.793 4.45497C12.8409 3.67219 12.5787 2.90196 12.0628 2.31017C11.5469 1.71838 10.8186 1.35238 10.0348 1.291C9.25103 1.22962 8.47442 1.47778 7.87227 1.98201L6.77194 2.93082\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"1.2\"\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n            />\r\n          </svg>\r\n        </a>\r\n      </Popover>\r\n      <Popover content={\"Thornode API\"} trigger=\"hover\">\r\n        <a\r\n          href={firstURL}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          style={{ marginLeft: 5 }}\r\n        >\r\n          <svg\r\n            focusable=\"false\"\r\n            preserveAspectRatio=\"xMidYMid meet\"\r\n            style={{ verticalAlign: \"middle\" }}\r\n            width=\"13\"\r\n            height=\"13\"\r\n            viewBox=\"0 0 13 13\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M10.0209 5.95871L9.20835 6.77121L6.22919 3.79204L7.04169 2.97954C7.44794 2.57327 8.93752 1.8962 10.0209 2.97954C11.1042 4.06288 10.4271 5.55243 10.0209 5.95871Z\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"1.2\"\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n            />\r\n            <path\r\n              d=\"M11.375 1.625L10.0208 2.97917\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"1.2\"\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n            />\r\n            <path\r\n              d=\"M2.97917 7.04199L3.79167 6.22949L6.77083 9.20866L5.95833 10.0212C5.55208 10.4274 4.0625 11.1045 2.97917 10.0212C1.89583 8.93783 2.57292 7.44827 2.97917 7.04199Z\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"1.2\"\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n            />\r\n            <path\r\n              d=\"M6.22919 8.66634L7.31252 7.58301\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"1.2\"\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n            />\r\n            <path\r\n              d=\"M1.625 11.3747L2.97917 10.0205\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"1.2\"\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n            />\r\n            <path\r\n              d=\"M4.33331 6.77083L5.41665 5.6875\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"1.2\"\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n            />\r\n          </svg>\r\n        </a>\r\n      </Popover>\r\n      <Popover content={ip_address} title={\"IP Address\"} trigger=\"hover\">\r\n        <span\r\n          style={{ cursor: \"pointer\", marginLeft: 5 }}\r\n          onClick={() =>\r\n            copyToClipWithPopup(\"IP Copied to clipboard:\", ip_address)\r\n          }\r\n        >\r\n          <svg\r\n            focusable=\"false\"\r\n            preserveAspectRatio=\"xMidYMid meet\"\r\n            style={{ verticalAlign: \"middle\" }}\r\n            width=\"13\"\r\n            height=\"13\"\r\n            viewBox=\"0 0 13 13\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M10.2916 1.08301H5.95831C5.81465 1.08301 5.67688 1.14008 5.5753 1.24166C5.47371 1.34324 5.41665 1.48102 5.41665 1.62467C5.41665 1.76833 5.47371 1.90611 5.5753 2.00769C5.67688 2.10927 5.81465 2.16634 5.95831 2.16634H10.2916C10.4353 2.16634 10.5731 2.22341 10.6747 2.32499C10.7762 2.42657 10.8333 2.56435 10.8333 2.70801V6.49967H1.62498C1.48132 6.49967 1.34355 6.55674 1.24196 6.65833C1.14038 6.75991 1.08331 6.89768 1.08331 7.04134V8.12467C1.08331 8.55565 1.25452 8.96898 1.55926 9.27372C1.86401 9.57847 2.27734 9.74967 2.70831 9.74967H4.33331V10.833H2.70831C2.56465 10.833 2.42688 10.8901 2.3253 10.9917C2.22371 11.0932 2.16665 11.231 2.16665 11.3747C2.16665 11.5183 2.22371 11.6561 2.3253 11.7577C2.42688 11.8593 2.56465 11.9163 2.70831 11.9163H10.2916C10.4353 11.9163 10.5731 11.8593 10.6747 11.7577C10.7762 11.6561 10.8333 11.5183 10.8333 11.3747C10.8333 11.231 10.7762 11.0932 10.6747 10.9917C10.5731 10.8901 10.4353 10.833 10.2916 10.833H8.66665V9.74967H10.2916C10.7226 9.74967 11.1359 9.57847 11.4407 9.27372C11.7454 8.96898 11.9166 8.55565 11.9166 8.12467V2.70801C11.9166 2.27703 11.7454 1.86371 11.4407 1.55896C11.1359 1.25421 10.7226 1.08301 10.2916 1.08301ZM7.58331 10.833H5.41665V9.74967H7.58331V10.833ZM10.8333 8.12467C10.8333 8.26833 10.7762 8.40611 10.6747 8.50769C10.5731 8.60927 10.4353 8.66634 10.2916 8.66634H2.70831C2.56465 8.66634 2.42688 8.60927 2.3253 8.50769C2.22371 8.40611 2.16665 8.26833 2.16665 8.12467V7.58301H10.8333V8.12467Z\"\r\n              fill=\"currentColor\"\r\n            />\r\n            <path\r\n              d=\"M3.9044 3.30042L2.78573 4.75234L1.66706 3.30042C1.36512 2.90853 1.36759 2.45798 1.57491 2.09161C1.78501 1.72031 2.21379 1.42871 2.78573 1.42871C3.35767 1.42871 3.78646 1.72031 3.99656 2.09161C4.20388 2.45798 4.20634 2.90853 3.9044 3.30042Z\"\r\n              stroke=\"currentColor\"\r\n            />\r\n            <path\r\n              d=\"M1.85712 5.57129H3.71426\"\r\n              stroke=\"currentColor\"\r\n              stroke-linecap=\"round\"\r\n            />\r\n          </svg>\r\n        </span>\r\n      </Popover>\r\n      <img\r\n        alt=\"#\"\r\n        onClick={() => addToFav(address)}\r\n        src={whichHeart(address)}\r\n        style={{\r\n          cursor: \"pointer\",\r\n          marginLeft: 5,\r\n          marginTop: 2,\r\n          width: 15,\r\n          height: 15,\r\n        }}\r\n      />\r\n    </span>\r\n  );\r\n};\r\n\r\nconst GlobalData = ({\r\n  globalData,\r\n  animateBlockCount,\r\n  state,\r\n  chartData,\r\n  handleClickTotalBond,\r\n  chartDataConfig,\r\n  totalBondOptions,\r\n  handlePopoverVisibility,\r\n  handleMaxEffectiveStake,\r\n  maxStakeOptions,\r\n}) => {\r\n  let timeToDisplay = \"\";\r\n  let msgTitle = \"\";\r\n  if (globalData?.churnTry && globalData?.retiring === \"false\") {\r\n    msgTitle = \"(CHURN) RETRY IN\";\r\n    timeToDisplay = `${globalData?.timeUntilRetry?.days}d ${globalData?.timeUntilRetry?.hours}h ${globalData?.timeUntilRetry?.minutes}m`;\r\n  } else if (globalData?.retiring === \"true\") {\r\n    msgTitle = \"(CHURN) CURRENTLY CHURNING\";\r\n    timeToDisplay = \"Churning\";\r\n  } else {\r\n    msgTitle = \"(CHURN) TIME UNTIL\";\r\n    timeToDisplay = `${globalData?.timeUntilChurn?.days}d ${globalData?.timeUntilChurn?.hours}h ${globalData?.timeUntilChurn?.minutes}m`;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"overview-item\">\r\n        <img alt=\"#\" src={blockIcon} className=\"overview-item__icon\" />\r\n        <div className=\"overview-item__value\">\r\n          <div className=\"overview-item__value-title\">CURRENT BLOCK</div>\r\n          <div className=\"overview-item__value-value\">\r\n            {parseInt(globalData.maxHeight).toLocaleString()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"overview-item\">\r\n        <img alt=\"#\" src={churnsIcon} className=\"overview-item__icon\" />\r\n        <div className=\"overview-item__value\">\r\n          <div className=\"overview-item__value-title\">{msgTitle} </div>\r\n          <div className=\"overview-item__value-value\">{timeToDisplay}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"overview-item\">\r\n        <img alt=\"#\" src={bondIcon} className=\"overview-item__icon\" />\r\n        <div className=\"overview-item__value\">\r\n          <div className=\"overview-item__value-title\">TOTAL BONDED VALUE</div>\r\n          <div className=\"overview-item__value-value\">\r\n            ᚱ\r\n            {state.activeNodes.length > 0\r\n              ? parseInt(\r\n                  state.activeNodes\r\n                    .map((item) => item.bond)\r\n                    .reduce((prev, next) => prev + next) / 100000000\r\n                ).toLocaleString()\r\n              : \"0\"}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"overview-item\">\r\n        <img alt=\"#\" src={marcketCapIcon} className=\"overview-item__icon\" />\r\n        <div className=\"overview-item__value\">\r\n          <div className=\"overview-item__value-title\">MARKET CAP</div>\r\n          <div className=\"overview-item__value-value\">\r\n            ${globalData?.coingecko?.market_cap?.toLocaleString()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"overview-item\">\r\n        <img alt=\"#\" src={timeIcon} className=\"overview-item__icon\" />\r\n        <div className=\"overview-item__value\">\r\n          <div className=\"overview-item__value-title\">24 HR VOLUME</div>\r\n          <div className=\"overview-item__value-value\">\r\n            ${globalData?.coingecko?.total_volume?.toLocaleString()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Popover\r\n        content={\r\n          chartDataConfig?.datasets?.[0]?.data &&\r\n          chartDataConfig.datasets[0].data.length > 0 ? (\r\n            <CustomLineChart\r\n              key={JSON.stringify(chartDataConfig)}\r\n              data={chartDataConfig}\r\n              options={maxStakeOptions}\r\n            />\r\n          ) : (\r\n            <div>No data available</div>\r\n          )\r\n        }\r\n        title=\"Max Effective Stake Over Time\"\r\n        trigger=\"click\"\r\n        overlayClassName=\"my-custom-popover\"\r\n        onVisibleChange={(visible) => handlePopoverVisibility(visible)}\r\n      >\r\n        <div\r\n          className=\"overview-item\"\r\n          onClick={handleMaxEffectiveStake}\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          <img alt=\"#\" src={verticalTopIcon} className=\"overview-item__icon\" />\r\n          <div className=\"overview-item__value\">\r\n            <div className=\"overview-item__value-title\">MAX EFFECTIVE BOND</div>\r\n            <div className=\"overview-item__value-value\">\r\n              ᚱ\r\n              {parseInt(\r\n                globalData.maxEffectiveStake / 100000000\r\n              ).toLocaleString()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Popover>\r\n      <Popover\r\n        content={\r\n          chartDataConfig?.datasets?.[0]?.data &&\r\n          chartDataConfig.datasets[0].data.length > 0 ? (\r\n            <CustomLineChart\r\n              key={JSON.stringify(chartDataConfig)}\r\n              data={chartDataConfig}\r\n              options={totalBondOptions}\r\n            />\r\n          ) : (\r\n            <div>No data available</div>\r\n          )\r\n        }\r\n        title=\"Total Bond Over Time\"\r\n        trigger=\"click\"\r\n        overlayClassName=\"my-custom-popover\"\r\n        onVisibleChange={(visible) => handlePopoverVisibility(visible)}\r\n      >\r\n        <div\r\n          className=\"overview-item\"\r\n          onClick={handleClickTotalBond}\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          <img alt=\"#\" src={chartLineIcon} className=\"overview-item__icon\" />\r\n          <div className=\"overview-item__value\">\r\n            <div className=\"overview-item__value-title\">\r\n              TOTAL BOND OVER TIME\r\n            </div>\r\n            <div className=\"overview-item__value-value\">CLICK HERE</div>\r\n          </div>\r\n        </div>\r\n      </Popover>\r\n    </>\r\n  );\r\n};\r\n\r\nconst CoinGeckoData = ({ globalData }) => {\r\n  return (\r\n    <>\r\n      <div className=\"overview-item\">\r\n        <img alt=\"#\" src={runeUsdtIcon} className=\"overview-item__icon\" />\r\n        <div className=\"overview-item__value\">\r\n          <div className=\"overview-item__value-title\">PRICE</div>\r\n          <div className=\"overview-item__value-value\">\r\n            ${globalData?.coingecko?.current_price?.toLocaleString()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"overview-item\">\r\n        <img alt=\"#\" src={highTradingIcon} className=\"overview-item__icon\" />\r\n        <div className=\"overview-item__value\">\r\n          <div className=\"overview-item__value-title\">24 HR HIGH</div>\r\n          <div className=\"overview-item__value-value\">\r\n            ${globalData?.coingecko?.high_24h}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"overview-item\">\r\n        <img alt=\"#\" src={lowTradingIcon} className=\"overview-item__icon\" />\r\n        <div className=\"overview-item__value\">\r\n          <div className=\"overview-item__value-title\">24 HR LOW</div>\r\n          <div className=\"overview-item__value-value\">\r\n            ${globalData?.coingecko?.low_24h}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"overview-item\">\r\n        <img alt=\"#\" src={mcapRankIcon} className=\"overview-item__icon\" />\r\n        <div className=\"overview-item__value\">\r\n          <div className=\"overview-item__value-title\">MARKET CAP RANK</div>\r\n          <div className=\"overview-item__value-value\">\r\n            {globalData?.coingecko?.market_cap_rank}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"overview-item\">\r\n        <img alt=\"#\" src={totalSupplyIcon} className=\"overview-item__icon\" />\r\n        <div className=\"overview-item__value\">\r\n          <div className=\"overview-item__value-title\">TOTAL SUPPLY</div>\r\n          <div className=\"overview-item__value-value\">\r\n            ᚱ{globalData?.coingecko?.total_supply?.toLocaleString()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ReturnIspImage = ({ isp }) => {\r\n  const style = { width: 25, height: 25 };\r\n\r\n  if (\r\n    isp === \"Amazon.com, Inc.\" ||\r\n    isp === \"Amazon Technologies Inc.\" ||\r\n    isp === \"Amazon.com\"\r\n  ) {\r\n    return <img alt=\"#\" src={imageAWS} style={style} />;\r\n  }\r\n  if (isp === \"DigitalOcean, LLC\" || isp === \"DigitalOcean\") {\r\n    return <img alt=\"#\" src={imageDO} style={style} />;\r\n  }\r\n  if (isp === \"Google LLC\") {\r\n    return <img alt=\"#\" src={imageGCP} style={style} />;\r\n  }\r\n\r\n  if (isp === \"Microsoft Corporation\") {\r\n    return <img alt=\"#\" src={imageAZURE} style={style} />;\r\n  }\r\n\r\n  if (isp === \"Hetzner Online GmbH\") {\r\n    return <img alt=\"#\" src={imageHETZNER} style={style} />;\r\n  }\r\n\r\n  if (isp === \"The Constant Company\" || isp === \"The Constant Company, LLC\") {\r\n    return <img alt=\"#\" src={imageVULTR} style={style} />;\r\n  }\r\n\r\n  if (isp === \"Leaseweb UK Limited\") {\r\n    return <img alt=\"#\" src={imageLeaseweb} style={style} />;\r\n  }\r\n\r\n  if (isp === \"Datacamp Limited\") {\r\n    return <img alt=\"#\" src={imageDatacamp} style={style} />;\r\n  }\r\n\r\n  if (isp === \"Comcast Cable Communications, LLC\") {\r\n    return <img alt=\"#\" src={imageComcast} style={style} />;\r\n  }\r\n\r\n  if (isp === \"Choopa\") {\r\n    return <img alt=\"#\" src={imageChoopa} style={style} />;\r\n  }\r\n\r\n  if (isp === \"Charter Communications Inc\") {\r\n    return <img alt=\"#\" src={imageChartercoms} style={style} />;\r\n  }\r\n\r\n  if (isp === \"AT&T Services, Inc.\") {\r\n    return <img alt=\"#\" src={imageATandT} style={style} />;\r\n  }\r\n\r\n  if (isp === \"Zenlayer Inc\") {\r\n    return <img alt=\"#\" src={imageZenlayer} style={style} />;\r\n  }\r\n\r\n  if (isp === \"Aljeel Aljadeed For Technology\") {\r\n    return <img alt=\"#\" src={imageAljeel} style={style} />;\r\n  }\r\n\r\n  if (isp === \"Hostinger International Limited\") {\r\n    return <img alt=\"#\" src={imageHostinger} style={style} />;\r\n  }\r\n\r\n  return \"-\";\r\n};\r\n\r\nconst ChainTD = ({ chain, obchains, maxChainHeights }) => {\r\n  const delta = obchains[chain] - maxChainHeights[chain];\r\n  return (\r\n    <td\r\n      style={{\r\n        textAlign: \"center\",\r\n        color: delta < -5 || isNaN(delta) ? \"red\" : null,\r\n      }}\r\n    >\r\n      {delta === 0 ? \"OK\" : delta.toString()}\r\n    </td>\r\n  );\r\n};\r\n\r\nconst BondProviderPopOver = ({ data }) => {\r\n  const totalBond = data\r\n    .map((item) => parseInt(item.bond))\r\n    .reduce((a, b) => a + b, 0);\r\n\r\n  const d = data.map((item, index) => {\r\n    return (\r\n      <div\r\n        key={index}\r\n        style={{ width: 200, display: \"flex\", justifyContent: \"space-between\" }}\r\n      >\r\n        <span>\r\n          {item.bond_address.substring(\r\n            item.bond_address.length - 4,\r\n            item.bond_address.length\r\n          )}\r\n        </span>\r\n        <span>{((item.bond / totalBond) * 100).toFixed(2)}%</span>\r\n        <span>\r\n          ᚱ{parseInt((item.bond / 100000000).toFixed()).toLocaleString()}\r\n        </span>\r\n      </div>\r\n    );\r\n  });\r\n  return d;\r\n};\r\n\r\nconst NodeTable = ({\r\n  handlePopoverVisibility,\r\n  nodeData,\r\n  clickSortHeader,\r\n  handleClickBond,\r\n  handleClickRewards,\r\n  handleClickSlashes,\r\n  sortColour,\r\n  maxChainHeights,\r\n  chains,\r\n  addToFav,\r\n  whichHeart,\r\n  chartDataConfig,\r\n  bondOptions,\r\n  rewardsOptions,\r\n  slashesOptions,\r\n  maxPositionOptions,\r\n  maxPositionChartDataConfig,\r\n  handleNodePosition,\r\n  visibleColumns = { ...defaulColumns },\r\n  sortBy = \"\",\r\n  sortDirection = \"\",\r\n}) => {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage, setItemsPerPage] = useState(100);\r\n\r\n  const totalPages = Math.ceil(nodeData.length / itemsPerPage);\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= totalPages; i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  const handleClick = (event) => {\r\n    setCurrentPage(Number(event.target.id));\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setCurrentPage((prevPage) =>\r\n      prevPage === totalPages ? prevPage : prevPage + 1\r\n    );\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    setCurrentPage((prevPage) => (prevPage === 1 ? prevPage : prevPage - 1));\r\n  };\r\n\r\n  const renderPageNumbers = pageNumbers.map((number) => {\r\n    return (\r\n      <li\r\n        key={number}\r\n        id={number}\r\n        onClick={handleClick}\r\n        className={`paging-item ${currentPage === number ? \"active\" : null}`}\r\n      >\r\n        {number}\r\n      </li>\r\n    );\r\n  });\r\n\r\n  const indexOfLastItem = currentPage * itemsPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  const currentItems = nodeData.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n  const getHeaderClassName = (key) => {\r\n    return visibleColumns && visibleColumns[key]\r\n      ? \"tableHeader\"\r\n      : \"tableHeader hidden\";\r\n  };\r\n\r\n  const getCellClassName = (key) => {\r\n    return visibleColumns && visibleColumns[key] ? \"\" : \"hidden\";\r\n  };\r\n\r\n  const updatePagingItem = (value) => {\r\n    setItemsPerPage(value);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"item-to-show\">\r\n        <span>Nodes per page:</span>\r\n\r\n        <Select\r\n          defaultValue={itemsPerPage}\r\n          showSearch={false}\r\n          onChange={updatePagingItem}\r\n          style={{ width: 80, borderRadius: 10 }}\r\n          dropdownMatchSelectWidth={false}\r\n          options={[\r\n            { value: \"10\", label: \"10\" },\r\n            { value: \"25\", label: \"25\" },\r\n            { value: \"50\", label: \"50\" },\r\n            { value: \"100\", label: \"100\" },\r\n          ]}\r\n        />\r\n      </div>\r\n      <div className=\"data-table-wrapper\">\r\n        <div style={{ width: \"100%\" }}>\r\n          <table\r\n            style={{\r\n              borderWidth: 1.1,\r\n              borderColor: \"rgba(0,0,0,1)\",\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <thead>\r\n              <tr\r\n                style={{\r\n                  borderStyle: \"solid\",\r\n                  borderWidth: 1.1,\r\n                  borderColor: \"rgba(0,0,0,1)\",\r\n                  color: \"black\",\r\n                  textAlign: \"right\",\r\n                  marginRight: 10,\r\n                }}\r\n              >\r\n                <th style={{ backgroundColor: \"rgba(24, 34, 51, 0.4)\" }}></th>\r\n                <th\r\n                  className={getHeaderClassName(\"nodes\")}\r\n                  style={{\r\n                    ...headerStyle,\r\n                    color: sortColour(\"node_address\"),\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  onClick={() => clickSortHeader(\"node_address\")}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <span style={{ marginRight: \"5px\" }}>Validator Nodes</span>\r\n                    <SortIcon\r\n                      column={\"node_address\"}\r\n                      sortBy={sortBy}\r\n                      sortDirection={sortDirection}\r\n                    />\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"age\")}\r\n                  style={{\r\n                    ...headerStyle,\r\n                    color: sortColour(\"age\"),\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  onClick={() => clickSortHeader(\"age\")}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <span style={{ marginRight: \"5px\" }}>Age</span>\r\n                    <SortIcon\r\n                      column={\"age\"}\r\n                      sortBy={sortBy}\r\n                      sortDirection={sortDirection}\r\n                    />\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"action\")}\r\n                  style={{\r\n                    ...headerStyle,\r\n                    color: sortColour(\"action\"),\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  onClick={() => clickSortHeader(\"action\")}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <span style={{ marginRight: \"5px\" }}>Action</span>\r\n                    <SortIcon\r\n                      column={\"action\"}\r\n                      sortBy={sortBy}\r\n                      sortDirection={sortDirection}\r\n                    />\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"isp\")}\r\n                  style={{\r\n                    ...headerStyle,\r\n                    color: sortColour(\"isp\"),\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  onClick={() => clickSortHeader(\"isp\")}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <span style={{ marginRight: \"5px\" }}>ISP</span>\r\n                    <SortIcon\r\n                      column={\"isp\"}\r\n                      sortBy={sortBy}\r\n                      sortDirection={sortDirection}\r\n                    />\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"location\")}\r\n                  style={{\r\n                    ...headerStyle,\r\n                    color: sortColour(\"location\"),\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  onClick={() => clickSortHeader(\"location\")}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <span style={{ marginRight: \"5px\" }}>Location</span>\r\n                    <SortIcon\r\n                      column={\"location\"}\r\n                      sortBy={sortBy}\r\n                      sortDirection={sortDirection}\r\n                    />\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"bond\")}\r\n                  style={{\r\n                    ...headerStyle,\r\n                    color: sortColour(\"bond\"),\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  onClick={() => clickSortHeader(\"bond\")}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <span style={{ marginRight: \"5px\" }}>Bond</span>\r\n                    <SortIcon\r\n                      column={\"bond\"}\r\n                      sortBy={sortBy}\r\n                      sortDirection={sortDirection}\r\n                    />\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"providers\")}\r\n                  style={{\r\n                    ...headerStyle,\r\n                    color: sortColour(\"bond_providers\"),\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  onClick={() => clickSortHeader(\"bond_providers\")}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <span style={{ marginRight: \"5px\" }}>Providers</span>\r\n                    <SortIcon\r\n                      column={\"bond_providers\"}\r\n                      sortBy={sortBy}\r\n                      sortDirection={sortDirection}\r\n                    />\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"rewards\")}\r\n                  style={{\r\n                    ...headerStyle,\r\n                    color: sortColour(\"current_award\"),\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  onClick={() => clickSortHeader(\"current_award\")}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <span style={{ marginRight: \"5px\" }}>Rewards</span>\r\n                    <SortIcon\r\n                      column={\"current_award\"}\r\n                      sortBy={sortBy}\r\n                      sortDirection={sortDirection}\r\n                    />\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"apy\")}\r\n                  style={{\r\n                    ...headerStyle,\r\n                    color: sortColour(\"apy\"),\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  onClick={() => clickSortHeader(\"apy\")}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <span style={{ marginRight: \"5px\" }}>APY</span>\r\n                    <SortIcon\r\n                      column={\"apy\"}\r\n                      sortBy={sortBy}\r\n                      sortDirection={sortDirection}\r\n                    />\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"slashes\")}\r\n                  style={{\r\n                    ...headerStyle,\r\n                    color: sortColour(\"slash_points\"),\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  onClick={() => clickSortHeader(\"slash_points\")}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <span style={{ marginRight: \"5px\" }}>Slashes</span>\r\n                    <SortIcon\r\n                      column={\"slash_points\"}\r\n                      sortBy={sortBy}\r\n                      sortDirection={sortDirection}\r\n                    />\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"score\")}\r\n                  style={{\r\n                    ...headerStyle,\r\n                    color: sortColour(\"score\"),\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  onClick={() => clickSortHeader(\"score\")}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <span style={{ marginRight: \"5px\" }}>Score</span>\r\n                    <SortIcon\r\n                      column={\"score\"}\r\n                      sortBy={sortBy}\r\n                      sortDirection={sortDirection}\r\n                    />\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"version\")}\r\n                  style={{\r\n                    ...headerStyle,\r\n                    color: sortColour(\"version\"),\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  onClick={() => clickSortHeader(\"version\")}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <span style={{ marginRight: \"5px\" }}>Version</span>\r\n                    <SortIcon\r\n                      column={\"version\"}\r\n                      sortBy={sortBy}\r\n                      sortDirection={sortDirection}\r\n                    />\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"leave\")}\r\n                  style={{\r\n                    ...headerStyle,\r\n                    color: sortColour(\"leave\"),\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  onClick={() => clickSortHeader(\"leave\")}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <span style={{ marginRight: \"5px\" }}>{leaveIcon}</span>\r\n                    <SortIcon\r\n                      column={\"leave\"}\r\n                      sortBy={sortBy}\r\n                      sortDirection={sortDirection}\r\n                    />\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"rpc\")}\r\n                  style={{ ...headerStyle, textAlign: \"center\" }}\r\n                >\r\n                  RPC\r\n                </th>\r\n                <th\r\n                  className={getHeaderClassName(\"bfr\")}\r\n                  style={{ ...headerStyle, textAlign: \"center\" }}\r\n                >\r\n                  BFR\r\n                </th>\r\n\r\n                {chains && (\r\n                  <>\r\n                    <th\r\n                      className={getHeaderClassName(\"BNB\")}\r\n                      style={{\r\n                        ...headerStyle,\r\n                        ...iconStyle,\r\n                        textAlign: \"center\",\r\n                      }}\r\n                      onClick={() => clickSortHeader(\"BNB\")}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"center\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"#\"\r\n                          src={binance}\r\n                          style={{\r\n                            width: 25,\r\n                            height: 25,\r\n                            display: \"block\",\r\n                            marginRight: \"5px\",\r\n                          }}\r\n                        />\r\n                        <SortIcon\r\n                          column={\"BNB\"}\r\n                          sortBy={sortBy}\r\n                          sortDirection={sortDirection}\r\n                        />\r\n                      </div>\r\n                    </th>\r\n                    <th\r\n                      className={getHeaderClassName(\"BTC\")}\r\n                      style={{\r\n                        ...headerStyle,\r\n                        ...iconStyle,\r\n                        textAlign: \"center\",\r\n                      }}\r\n                      onClick={() => clickSortHeader(\"BTC\")}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"center\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"#\"\r\n                          src={bitcoin}\r\n                          style={{\r\n                            width: 25,\r\n                            height: 25,\r\n                            display: \"block\",\r\n                            marginRight: \"5px\",\r\n                          }}\r\n                        />\r\n                        <SortIcon\r\n                          column={\"BTC\"}\r\n                          sortBy={sortBy}\r\n                          sortDirection={sortDirection}\r\n                        />\r\n                      </div>\r\n                    </th>\r\n\r\n                    <th\r\n                      className={getHeaderClassName(\"ETH\")}\r\n                      style={{\r\n                        ...headerStyle,\r\n                        ...iconStyle,\r\n                        textAlign: \"center\",\r\n                      }}\r\n                      onClick={() => clickSortHeader(\"ETH\")}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"center\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"#\"\r\n                          src={eth}\r\n                          style={{\r\n                            width: 25,\r\n                            height: 25,\r\n                            display: \"block\",\r\n                            marginRight: \"5px\",\r\n                          }}\r\n                        />\r\n                        <SortIcon\r\n                          column={\"ETH\"}\r\n                          sortBy={sortBy}\r\n                          sortDirection={sortDirection}\r\n                        />\r\n                      </div>\r\n                    </th>\r\n                    <th\r\n                      className={getHeaderClassName(\"LTC\")}\r\n                      style={{\r\n                        ...headerStyle,\r\n                        ...iconStyle,\r\n                        textAlign: \"center\",\r\n                      }}\r\n                      onClick={() => clickSortHeader(\"LTC\")}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"center\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"#\"\r\n                          src={litecoin}\r\n                          style={{\r\n                            width: 25,\r\n                            height: 25,\r\n                            display: \"block\",\r\n                            marginRight: \"5px\",\r\n                          }}\r\n                        />\r\n                        <SortIcon\r\n                          column={\"LTC\"}\r\n                          sortBy={sortBy}\r\n                          sortDirection={sortDirection}\r\n                        />\r\n                      </div>\r\n                    </th>\r\n                    <th\r\n                      className={getHeaderClassName(\"BCH\")}\r\n                      style={{\r\n                        ...headerStyle,\r\n                        ...iconStyle,\r\n                        textAlign: \"center\",\r\n                      }}\r\n                      onClick={() => clickSortHeader(\"BCH\")}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"center\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"#\"\r\n                          src={bitcoincash}\r\n                          style={{\r\n                            width: 25,\r\n                            height: 25,\r\n                            display: \"block\",\r\n                            marginRight: \"5px\",\r\n                          }}\r\n                        />\r\n                        <SortIcon\r\n                          column={\"BCH\"}\r\n                          sortBy={sortBy}\r\n                          sortDirection={sortDirection}\r\n                        />\r\n                      </div>\r\n                    </th>\r\n                    <th\r\n                      className={getHeaderClassName(\"DOGE\")}\r\n                      style={{\r\n                        ...headerStyle,\r\n                        ...iconStyle,\r\n                        textAlign: \"center\",\r\n                      }}\r\n                      onClick={() => clickSortHeader(\"DOGE\")}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"center\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"#\"\r\n                          src={dogecoin}\r\n                          style={{\r\n                            width: 25,\r\n                            height: 25,\r\n                            display: \"block\",\r\n                            marginRight: \"5px\",\r\n                          }}\r\n                        />\r\n                        <SortIcon\r\n                          column={\"DOGE\"}\r\n                          sortBy={sortBy}\r\n                          sortDirection={sortDirection}\r\n                        />\r\n                      </div>\r\n                    </th>\r\n                    <th\r\n                      className={getHeaderClassName(\"GAIA\")}\r\n                      style={{\r\n                        ...headerStyle,\r\n                        ...iconStyle,\r\n                        textAlign: \"center\",\r\n                      }}\r\n                      onClick={() => clickSortHeader(\"GAIA\")}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"center\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"#\"\r\n                          src={gaia}\r\n                          style={{\r\n                            width: 25,\r\n                            height: 25,\r\n                            display: \"block\",\r\n                            marginRight: \"5px\",\r\n                          }}\r\n                        />\r\n                        <SortIcon\r\n                          column={\"GAIA\"}\r\n                          sortBy={sortBy}\r\n                          sortDirection={sortDirection}\r\n                        />\r\n                      </div>\r\n                    </th>\r\n\r\n                    <th\r\n                      className={getHeaderClassName(\"AVAX\")}\r\n                      style={{\r\n                        ...headerStyle,\r\n                        ...iconStyle,\r\n                        textAlign: \"center\",\r\n                      }}\r\n                      onClick={() => clickSortHeader(\"AVAX\")}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"center\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"#\"\r\n                          src={avax}\r\n                          style={{\r\n                            width: 25,\r\n                            height: 25,\r\n                            display: \"block\",\r\n                            marginRight: \"5px\",\r\n                          }}\r\n                        />\r\n                        <SortIcon\r\n                          column={\"AVAX\"}\r\n                          sortBy={sortBy}\r\n                          sortDirection={sortDirection}\r\n                        />\r\n                      </div>\r\n                    </th>\r\n\r\n                    <th\r\n                      className={getHeaderClassName(\"BSC\")}\r\n                      style={{\r\n                        ...headerStyle,\r\n                        ...iconStyle,\r\n                        textAlign: \"center\",\r\n                      }}\r\n                      onClick={() => clickSortHeader(\"BSC\")}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"center\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          alt=\"#\"\r\n                          src={bsc}\r\n                          style={{\r\n                            width: 25,\r\n                            height: 25,\r\n                            display: \"block\",\r\n                            marginRight: \"5px\",\r\n                          }}\r\n                        />\r\n                        <SortIcon\r\n                          column={\"BSC\"}\r\n                          sortBy={sortBy}\r\n                          sortDirection={sortDirection}\r\n                        />\r\n                      </div>\r\n                    </th>\r\n                  </>\r\n                )}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {currentItems.map((item, index) => (\r\n                <tr key={index} style={{ ...trStyle }}>\r\n                  <td\r\n                    style={{\r\n                      backgroundColor: \"rgba(24, 34, 51, 0.4)\",\r\n                      minWidth: 35,\r\n                      width: 50,\r\n                      paddingLeft: 5,\r\n                    }}\r\n                  >\r\n                    {index + 1}\r\n                  </td>\r\n                  <td\r\n                    className={getCellClassName(\"nodes\")}\r\n                    style={{\r\n                      ...tdStyle,\r\n                      textAlign: \"center\",\r\n                      minWidth: 250,\r\n                      maxWidth: 300,\r\n                    }}\r\n                  >\r\n                    <Popover\r\n                      content={item.node_address}\r\n                      title={\"Thornode Address\"}\r\n                      trigger=\"hover\"\r\n                    >\r\n                      <span\r\n                        style={{ cursor: \"pointer\" }}\r\n                        className=\"nodeaddress\"\r\n                        onClick={() =>\r\n                          copyToClipWithPopup(\r\n                            \"Node address copied to clipboard:\",\r\n                            item.node_address\r\n                          )\r\n                        }\r\n                      >\r\n                        {`...${item.node_address.substring(\r\n                          item.node_address.length - 4\r\n                        )}`}\r\n                      </span>\r\n                    </Popover>\r\n                    <Popover\r\n                      content={\r\n                        maxPositionChartDataConfig?.datasets?.length > 0 ? (\r\n                          <CustomScatterChart\r\n                            key={JSON.stringify(maxPositionChartDataConfig)}\r\n                            data={maxPositionChartDataConfig}\r\n                            options={maxPositionOptions}\r\n                          />\r\n                        ) : (\r\n                          <div>No data available</div>\r\n                        )\r\n                      }\r\n                      title={`Performance Over Time for ${item.node_address.slice(\r\n                        -4\r\n                      )}`}\r\n                      trigger=\"click\"\r\n                      overlayClassName=\"my-custom-popover\"\r\n                      onVisibleChange={(visible) =>\r\n                        handlePopoverVisibility(visible)\r\n                      }\r\n                    >\r\n                      <span className=\"icon-wrapper\">\r\n                        <DotChartOutlined\r\n                          style={{ stroke: \"currentColor\" }}\r\n                          onClick={() => handleNodePosition(item.node_address)}\r\n                        />\r\n                      </span>\r\n                    </Popover>\r\n                    <Icons\r\n                      address={item.node_address}\r\n                      ip_address={item.ip_address}\r\n                      addToFav={addToFav}\r\n                      whichHeart={whichHeart}\r\n                    />\r\n                  </td>\r\n                  <td\r\n                    className={getCellClassName(\"age\")}\r\n                    style={{ ...tdStyle, textAlign: \"center\" }}\r\n                  >\r\n                    {item.age.toFixed(2)}\r\n                  </td>\r\n                  <td\r\n                    className={getCellClassName(\"action\")}\r\n                    style={{ ...tdStyle, textAlign: \"center\", fontSize: 12 }}\r\n                  >\r\n                    {item.action}\r\n                  </td>\r\n                  <td\r\n                    className={getCellClassName(\"isp\")}\r\n                    style={{ ...tdStyle, textAlign: \"center\" }}\r\n                  >\r\n                    <Popover\r\n                      content={item.isp}\r\n                      title={\"Provider\"}\r\n                      trigger=\"hover\"\r\n                    >\r\n                      <span style={{ cursor: \"pointer\" }}>\r\n                        <ReturnIspImage isp={item.isp} />\r\n                      </span>\r\n                    </Popover>\r\n                  </td>\r\n                  <td style={{ ...tdStyle, textAlign: \"center\", fontSize: 12 }}>\r\n                    {item.location}\r\n                  </td>\r\n                  <td\r\n                    className={getCellClassName(\"bond\")}\r\n                    style={{ tdStyle, textAlign: \"center\" }}\r\n                    onClick={() => handleClickBond(item.node_address)}\r\n                  >\r\n                    <Popover\r\n                      content={\r\n                        chartDataConfig?.datasets?.[0]?.data &&\r\n                        chartDataConfig.datasets[0].data.length > 0 ? (\r\n                          <CustomLineChart\r\n                            key={JSON.stringify(chartDataConfig)}\r\n                            data={chartDataConfig}\r\n                            options={bondOptions}\r\n                          />\r\n                        ) : (\r\n                          <div>No data available</div>\r\n                        )\r\n                      }\r\n                      title={`Bond Value Over Time for ${item.node_address.slice(\r\n                        -4\r\n                      )}`}\r\n                      trigger=\"click\"\r\n                      overlayClassName=\"my-custom-popover\"\r\n                      onVisibleChange={(visible) =>\r\n                        handlePopoverVisibility(visible)\r\n                      }\r\n                    >\r\n                      <span\r\n                        style={{\r\n                          display: \"inline-flex\",\r\n                          color: \"#1890ff\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        <HistoryOutlined style={{ marginRight: 4 }} />ᚱ\r\n                        {parseInt(\r\n                          (item.bond / 100000000).toFixed()\r\n                        ).toLocaleString()}\r\n                      </span>\r\n                    </Popover>\r\n                  </td>\r\n                  <td\r\n                    className={getCellClassName(\"providers\")}\r\n                    style={{ ...tdStyle, textAlign: \"center\" }}\r\n                  >\r\n                    <Popover\r\n                      content={\r\n                        <BondProviderPopOver\r\n                          data={item.bond_providers.providers}\r\n                        />\r\n                      }\r\n                      title={\"Bond Providers\"}\r\n                      trigger=\"hover\"\r\n                    >\r\n                      <span style={{ cursor: \"pointer\" }}>\r\n                        {item.bond_providers.providers.length}\r\n                      </span>\r\n                    </Popover>\r\n                  </td>\r\n                  <td\r\n                    className={getCellClassName(\"rewards\")}\r\n                    style={{ ...tdStyle, textAlign: \"center\" }}\r\n                    onClick={() => handleClickRewards(item.node_address)}\r\n                  >\r\n                    <Popover\r\n                      content={\r\n                        chartDataConfig?.datasets?.[0]?.data &&\r\n                        chartDataConfig.datasets[0].data.length > 0 ? (\r\n                          <CustomLineChart\r\n                            key={JSON.stringify(chartDataConfig)}\r\n                            data={chartDataConfig}\r\n                            options={rewardsOptions}\r\n                          />\r\n                        ) : (\r\n                          <div>No data available</div>\r\n                        )\r\n                      }\r\n                      title={`Rewards Over Time for ${item.node_address.slice(\r\n                        -4\r\n                      )}`}\r\n                      trigger=\"click\"\r\n                      overlayClassName=\"my-custom-popover\"\r\n                      onVisibleChange={(visible) =>\r\n                        handlePopoverVisibility(visible)\r\n                      }\r\n                    >\r\n                      <span\r\n                        style={{\r\n                          display: \"inline-flex\",\r\n                          color: \"#1890ff\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        <HistoryOutlined style={{ marginRight: 4 }} />ᚱ\r\n                        {parseInt(\r\n                          (item.current_award / 100000000).toFixed()\r\n                        ).toLocaleString()}\r\n                      </span>\r\n                    </Popover>\r\n                  </td>\r\n                  <td\r\n                    className={getCellClassName(\"apy\")}\r\n                    style={{ ...tdStyle, textAlign: \"center\" }}\r\n                  >\r\n                    {item.apy}\r\n                  </td>\r\n                  <td\r\n                    className={getCellClassName(\"slashes\")}\r\n                    style={{ ...tdStyle, textAlign: \"center\" }}\r\n                    onClick={() => handleClickSlashes(item.node_address)}\r\n                  >\r\n                    <Popover\r\n                      content={\r\n                        chartDataConfig?.datasets?.[0]?.data &&\r\n                        chartDataConfig.datasets[0].data.length > 0 ? (\r\n                          <CustomLineChart\r\n                            key={JSON.stringify(chartDataConfig)}\r\n                            data={chartDataConfig}\r\n                            options={slashesOptions}\r\n                          />\r\n                        ) : (\r\n                          <div>No data available</div>\r\n                        )\r\n                      }\r\n                      title={`Slashes Over Time for ${item.node_address.slice(\r\n                        -4\r\n                      )}`}\r\n                      trigger=\"click\"\r\n                      overlayClassName=\"my-custom-popover\"\r\n                      onVisibleChange={(visible) =>\r\n                        handlePopoverVisibility(visible)\r\n                      }\r\n                    >\r\n                      <span\r\n                        style={{\r\n                          display: \"inline-flex\",\r\n                          color: \"#1890ff\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        <HistoryOutlined style={{ marginRight: 4 }} />\r\n                        {parseInt(item.slash_points).toLocaleString()}\r\n                      </span>\r\n                    </Popover>\r\n                  </td>\r\n                  <td\r\n                    className={getCellClassName(\"score\")}\r\n                    style={{ ...tdStyle, textAlign: \"center\" }}\r\n                  >\r\n                    {item.score}\r\n                  </td>\r\n                  <td\r\n                    className={getCellClassName(\"version\")}\r\n                    style={{ ...tdStyle, textAlign: \"center\" }}\r\n                  >\r\n                    {item.version}\r\n                  </td>\r\n                  {/* <td className={getCellClassName('rpc')} style={{...tdStyle, textAlign: 'center'}}><a style={{color: 'rgba(0,0,0,0.85)'}} href={`http://${item.ip_address}:27147/health?`} target=\"_blank\" rel=\"noopener noreferrer\">{item.rpc === 'true' ? '*' : 'BAD'}</a></td> */}\r\n                  <td style={{ ...tdStyle, textAlign: \"center\" }}>\r\n                    {item.forced_to_leave === 1 || item.requested_to_leave === 1\r\n                      ? \"yes\"\r\n                      : \"-\"}\r\n                  </td>\r\n                  <td\r\n                    className={getCellClassName(\"rpc\")}\r\n                    style={{ ...tdStyle, textAlign: \"center\" }}\r\n                  >\r\n                    <a\r\n                      style={{ color: \"rgba(0,0,0,0.85)\" }}\r\n                      href={`http://${item.ip_address}:27147/health?`}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      {item.rpc !== \"null\" ? \"*\" : \"Bad\"}\r\n                    </a>\r\n                  </td>\r\n                  <td\r\n                    className={getCellClassName(\"bfr\")}\r\n                    style={{ ...tdStyle, textAlign: \"center\" }}\r\n                  >\r\n                    <a\r\n                      style={{ color: \"rgba(0,0,0,0.85)\" }}\r\n                      href={`http://${item.ip_address}:6040/p2pid`}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      {item.bifrost !== \"null\" ? \"*\" : \"Bad\"}\r\n                    </a>\r\n                  </td>\r\n\r\n                  {chains && (\r\n                    <>\r\n                      <ChainTD\r\n                        chain={\"BNB\"}\r\n                        obchains={item.obchains}\r\n                        maxChainHeights={maxChainHeights}\r\n                      />\r\n                      <ChainTD\r\n                        chain={\"BTC\"}\r\n                        obchains={item.obchains}\r\n                        maxChainHeights={maxChainHeights}\r\n                      />\r\n                      <ChainTD\r\n                        chain={\"ETH\"}\r\n                        obchains={item.obchains}\r\n                        maxChainHeights={maxChainHeights}\r\n                      />\r\n                      <ChainTD\r\n                        chain={\"LTC\"}\r\n                        obchains={item.obchains}\r\n                        maxChainHeights={maxChainHeights}\r\n                      />\r\n                      <ChainTD\r\n                        chain={\"BCH\"}\r\n                        obchains={item.obchains}\r\n                        maxChainHeights={maxChainHeights}\r\n                      />\r\n                      <ChainTD\r\n                        chain={\"DOGE\"}\r\n                        obchains={item.obchains}\r\n                        maxChainHeights={maxChainHeights}\r\n                      />\r\n                      <ChainTD\r\n                        chain={\"GAIA\"}\r\n                        obchains={item.obchains}\r\n                        maxChainHeights={maxChainHeights}\r\n                      />\r\n                      <ChainTD\r\n                        chain={\"AVAX\"}\r\n                        obchains={item.obchains}\r\n                        maxChainHeights={maxChainHeights}\r\n                      />\r\n                      <ChainTD\r\n                        chain={\"BSC\"}\r\n                        obchains={item.obchains}\r\n                        maxChainHeights={maxChainHeights}\r\n                      />\r\n                    </>\r\n                  )}\r\n                </tr>\r\n              ))}\r\n              <tr>\r\n                <td></td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"paging-wrapper\">\r\n          <ul className=\"page-numbers\">\r\n            <li\r\n              onClick={handlePrev}\r\n              className={`nav-button nav-button--prev ${\r\n                currentPage === 1 ? \"disabled\" : null\r\n              }`}\r\n            >\r\n              <LeftOutlined />\r\n            </li>\r\n            {renderPageNumbers}\r\n            <li\r\n              onClick={handleNext}\r\n              className={`nav-button nav-button--next ${\r\n                currentPage === totalPages ? \"disabled\" : null\r\n              }`}\r\n            >\r\n              <RightOutlined />\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nlet timer = null;\r\n\r\nconst defaulColumns = {\r\n  nodes: true,\r\n  age: true,\r\n  action: true,\r\n  isp: true,\r\n  bond: true,\r\n  providers: true,\r\n  location: true,\r\n  leave: true,\r\n  rewards: true,\r\n  apy: true,\r\n  slashes: true,\r\n  score: true,\r\n  version: true,\r\n  rpc: true,\r\n  bfr: true,\r\n  BTC: true,\r\n  BNB: true,\r\n  ETH: true,\r\n  LTC: true,\r\n  BCH: true,\r\n  DOGE: true,\r\n  GAIA: true,\r\n  AVAX: true,\r\n  BSC: true,\r\n};\r\nexport default class extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isPopoverOpen: false,\r\n      chartData: [],\r\n      data: [],\r\n      globalData: [],\r\n      sortBy: \"bond\",\r\n      sortDirection: \"desc\",\r\n      activeNodes: [],\r\n      standByNodes: [],\r\n      whitelistedNodes: [],\r\n      animateBlockCount: false,\r\n      myFavNodes: [],\r\n      searchTerm: \"\",\r\n      visibleColumns: defaulColumns,\r\n      nodesFilter: {},\r\n      loading: true,\r\n      sortByChain: null,\r\n      minX: null,\r\n      maxX: null,\r\n    };\r\n    this.clickSortHeader = this.clickSortHeader.bind(this);\r\n    this.handleClickRewards = this.handleClickRewards.bind(this);\r\n    this.handleClickSlashes = this.handleClickSlashes.bind(this);\r\n    this.handleClickBond = this.handleClickBond.bind(this);\r\n    this.handleClickTotalBond = this.handleClickTotalBond.bind(this);\r\n    this.handleNodePosition = this.handleNodePosition.bind(this);\r\n  }\r\n\r\n  handlePopoverVisibility = (visible) => {\r\n    this.setState({ isPopoverOpen: visible });\r\n  };\r\n\r\n  async componentWillMount() {\r\n    const myFavNodes = getCookie(\"myFavNodes\");\r\n\r\n    const tmp = myFavNodes.length > 0 ? JSON.parse(myFavNodes) : [];\r\n\r\n    this.setState({ myFavNodes: tmp });\r\n\r\n    this.refreshData();\r\n  }\r\n\r\n  async refreshData() {\r\n    if (this.state.isPopoverOpen) {\r\n      return;\r\n    }\r\n    const data = await getData();\r\n\r\n    if (this.state.loading) {\r\n      this.setState({ loading: false });\r\n    }\r\n\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      console.log(\"DEV ONLY: Refresh Data Results: \", data);\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        data: data.data,\r\n        globalData: data.globalData,\r\n        maxChainHeights: data.maxChainHeights,\r\n        animateBlockCount: false,\r\n      },\r\n      () => this.setData()\r\n    ); //Change animateBlockCount to true here for animation\r\n  }\r\n\r\n  componentDidMount() {\r\n    timer = setInterval(() => {\r\n      this.setState({ animateBlockCount: false }, () => this.refreshData());\r\n      //this.refreshData()\r\n    }, 6000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(timer);\r\n  }\r\n\r\n  addToFav(address) {\r\n    //setCookie('myFavNodes', '')\r\n    //return\r\n\r\n    //Below works to add, but need to check if already exists, and if so remove\r\n\r\n    const myFavNodes = getCookie(\"myFavNodes\"); //JSON.parse(\r\n\r\n    if (myFavNodes.length === 0) {\r\n      //in here no current fav nodes\r\n      const singleAddress = JSON.stringify([address]);\r\n      setCookie(\"myFavNodes\", singleAddress);\r\n      this.setState({ myFavNodes: singleAddress }, () => this.setData());\r\n    } else {\r\n      //If we already have some fav nodes\r\n      const newFaveNodes = JSON.parse(myFavNodes);\r\n\r\n      //Need to check if already exists\r\n      if (newFaveNodes.indexOf(address) > -1) {\r\n        //In the array!\r\n\r\n        const newArrayWithRemove = newFaveNodes.filter(\r\n          (item) => item !== address\r\n        );\r\n\r\n        const newFaveNodesNew = JSON.stringify(newArrayWithRemove);\r\n        this.setState({ myFavNodes: newArrayWithRemove }, () => this.setData());\r\n        setCookie(\"myFavNodes\", newFaveNodesNew);\r\n      } else {\r\n        //Not in the array\r\n        newFaveNodes[newFaveNodes.length] = address;\r\n\r\n        const newFaveNodesNew = JSON.stringify(newFaveNodes);\r\n\r\n        this.setState({ myFavNodes: newFaveNodes }, () => this.setData());\r\n        setCookie(\"myFavNodes\", newFaveNodesNew);\r\n      }\r\n    }\r\n  }\r\n\r\n  returnSearchedData(data) {\r\n    if (this.state.searchTerm === \"\") {\r\n      return data;\r\n    } else {\r\n      const filteredNodes = data.filter((item) => {\r\n        return (\r\n          item.node_address.includes(this.state.searchTerm) ||\r\n          item.bondProvidersString.includes(this.state.searchTerm)\r\n        );\r\n      });\r\n      return filteredNodes;\r\n    }\r\n  }\r\n\r\n  setData() {\r\n    // Grab our state so we can mutate it\r\n    let myData = JSON.parse(JSON.stringify(this.state.data));\r\n\r\n    // Add faves to the data, then we can sort by then below\r\n    const newItems = myData.map((item) => {\r\n      if (this.state.myFavNodes.includes(item.node_address)) {\r\n        item.fave = 1;\r\n      } else {\r\n        item.fave = 0;\r\n      }\r\n      return item;\r\n    });\r\n\r\n    // Filter for our three tables\r\n    let activeNodes = newItems.filter((item) => item.status === \"Active\");\r\n    let standbyNodes = newItems.filter(\r\n      (item) =>\r\n        (item.status === \"Standby\" || item.status === \"Ready\") &&\r\n        item.version === this.state.globalData.maxVersion\r\n    );\r\n\r\n    // Create an array of all nodes that are active and standby\r\n    const active_standy_nodes = [\r\n      ...activeNodes.map((item) => item.node_address),\r\n      ...standbyNodes.map((item) => item.node_address),\r\n    ];\r\n\r\n    // White listed are all other nodes which are not active or on standby\r\n    let whitelisted = newItems.filter(\r\n      (item) => !active_standy_nodes.includes(item.node_address)\r\n    );\r\n\r\n    activeNodes = this.findChurnOuts(activeNodes); // Add in the actions for churning\r\n    standbyNodes = this.findChurnIns(standbyNodes); // Add in the actions for nodes churning in\r\n\r\n    // Filter here if any searchTerm from the search bar\r\n    activeNodes = this.returnSearchedData(activeNodes);\r\n    standbyNodes = this.returnSearchedData(standbyNodes);\r\n    whitelisted = this.returnSearchedData(whitelisted);\r\n\r\n    // Sort and add our favs to the top\r\n    let activeNodesSorted = this.sortData(\r\n      activeNodes,\r\n      this.state.sortBy,\r\n      this.state.sortDirection,\r\n      false\r\n    );\r\n    const favActiveNodesSorted = activeNodesSorted.filter(\r\n      (item) => item.fave === 1\r\n    ); // Get our favourites\r\n    activeNodesSorted = activeNodesSorted.filter((item) => item.fave === 0); // Get our non favourites\r\n    activeNodesSorted = [...favActiveNodesSorted, ...activeNodesSorted]; // Join faves at top with non favourites\r\n\r\n    const standBySorted = this.sortData(\r\n      standbyNodes,\r\n      this.state.sortBy,\r\n      this.state.sortDirection,\r\n      false\r\n    );\r\n    const whitelistedSorted = this.sortData(\r\n      whitelisted,\r\n      this.state.sortBy,\r\n      this.state.sortDirection,\r\n      false\r\n    );\r\n\r\n    this.setState({\r\n      activeNodes: activeNodesSorted,\r\n      standByNodes: standBySorted,\r\n      whitelistedNodes: whitelistedSorted,\r\n    });\r\n  }\r\n\r\n  onColumnUpdate(config) {\r\n    this.setState({ visibleColumns: config });\r\n  }\r\n\r\n  onNodesFilter(key) {\r\n    this.setState((prevState) => ({\r\n      nodesFilter: {\r\n        ...prevState.nodesFilter,\r\n        [key]: !prevState.nodesFilter[key],\r\n      },\r\n    }));\r\n  }\r\n\r\n  /*\r\nSplit the data into over 300ks and under 300ks\r\nWith the over 300ks, take the top 3 if they exist and apply churn in action\r\nIf 4 nodes churn in instead of 3 each time, add another row\r\n*/\r\n  findChurnIns(standbyNodes) {\r\n    if (standbyNodes.length === 0) return []; //Stops filter from breaking when search returns 0\r\n\r\n    const over300 = standbyNodes.filter((item) => item.bond >= 30000000000000);\r\n    const over300Sorted = this.sortData(over300, \"bond\", \"desc\");\r\n\r\n    if (over300Sorted.length > 0) {\r\n      over300Sorted[Math.min(0, over300Sorted.length - 1)].action = \"Churn In\";\r\n      over300Sorted[Math.min(1, over300Sorted.length - 1)].action = \"Churn In\";\r\n      over300Sorted[Math.min(2, over300Sorted.length - 1)].action = \"Churn In\";\r\n      over300Sorted[Math.min(3, over300Sorted.length - 1)].action = \"Churn In\";\r\n      over300Sorted[Math.min(4, over300Sorted.length - 1)].action = \"Churn In\";\r\n    }\r\n    const under300 = standbyNodes.filter((item) => item.bond < 30000000000000);\r\n\r\n    return [...over300Sorted, ...under300];\r\n  }\r\n\r\n  /*\r\nLowest Bond\r\nOldest Node\r\nWorst Performer (Can't churn out if just churned in, one cycle grace period)\r\n*/\r\n  findChurnOuts(activeNodes) {\r\n    if (activeNodes.length === 0) return []; //Stops filter from breaking when search returns 0\r\n\r\n    let activeNodesSorted = this.sortData(activeNodes, \"age\", \"desc\");\r\n    activeNodesSorted[0].action = \"Oldest\";\r\n\r\n    activeNodesSorted = this.sortData(activeNodes, \"bond\", \"asc\");\r\n    activeNodesSorted[0].action = \"Smallest Bond\";\r\n\r\n    activeNodesSorted = this.sortData(activeNodes, \"score\", \"asc\", true);\r\n    //we set the 'Worst Performing' tag in the sortData function\r\n\r\n    this.calcBadValidatorRedline(activeNodes);\r\n\r\n    return activeNodesSorted;\r\n  }\r\n\r\n  calcBadValidatorRedline(activeNodes) {\r\n    //Only get nodes with slashes greater than 100\r\n    const greater100Slashes = activeNodes.filter(\r\n      (item) => item.slash_points > 100\r\n    );\r\n    //Add all the scores together for thes nodes\r\n    const sum = greater100Slashes.reduce((accumulator, object) => {\r\n      return accumulator + parseFloat(object.score);\r\n    }, 0);\r\n    //Find the average\r\n    const averageScore = sum / (greater100Slashes.length + 1);\r\n\r\n    const validatorLine =\r\n      averageScore / this.state.globalData.BadValidatorRedline;\r\n\r\n    activeNodes.map((item) => {\r\n      if (item.score < validatorLine) {\r\n        item.action = \"Bad Redline\";\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  /*\r\nSort by either string or number\r\nWe use string sort function if value is one of the arrays else do second sort number\r\n*/\r\n  sortData(data, value = null, direction = null, worst_perform = false) {\r\n    const toSortBy = value === null ? this.state.sortBy : value;\r\n    let newData = [];\r\n    if (this.state.sortChain) {\r\n      // New sorting logic for chains\r\n      const chain = toSortBy;\r\n      newData = [...data].sort((a, b) => {\r\n        const deltaA = a.obchains[chain] - this.state.maxChainHeights[chain];\r\n        const deltaB = b.obchains[chain] - this.state.maxChainHeights[chain];\r\n        if (deltaA === deltaB) {\r\n          return a[\"node_address\"].localeCompare(b[\"node_address\"]);\r\n        }\r\n        return deltaA - deltaB;\r\n      });\r\n    } else {\r\n      if (\r\n        [\r\n          \"node\",\r\n          \"isp\",\r\n          \"location\",\r\n          \"version\",\r\n          \"action\",\r\n          \"node_address\",\r\n        ].includes(toSortBy)\r\n      ) {\r\n        //This sort function for strings\r\n        newData = data.sort((a, b) => a[toSortBy].localeCompare(b[toSortBy]));\r\n      } else if (toSortBy === \"bond_providers\") {\r\n        //This is for bond provider sort as we need to go another layer deep in the object\r\n        newData = data.sort(\r\n          (a, b) => a[toSortBy].providers.length - b[toSortBy].providers.length\r\n        );\r\n      } else if (worst_perform === true) {\r\n        //This is for when we are sorting for action of worst performance as we want to exclude any with age under 3 days\r\n        const ageCutOffDays = 3;\r\n        const a = data.filter((item) => parseFloat(item.age) > ageCutOffDays);\r\n        const b = data.filter((item) => parseFloat(item.age) <= ageCutOffDays);\r\n        const aSorted = a.sort((a, b) => b[toSortBy] - a[toSortBy]);\r\n\r\n        aSorted[aSorted.length - 1].action = \"Worst Performing\";\r\n        newData = [...aSorted, ...b];\r\n      } else {\r\n        //This sort function for numbers\r\n        //When sorting, if values are the same, sort by node_address\r\n        newData = data.sort(function (a, b) {\r\n          if (a[toSortBy] === b[toSortBy]) {\r\n            return a[\"node_address\"].localeCompare(b[\"node_address\"]);\r\n          }\r\n          return a[toSortBy] > b[toSortBy] ? 1 : -1;\r\n        });\r\n      }\r\n    }\r\n    //If we pass it a direction, we set it here, if not we take it from the state\r\n    const toDirection =\r\n      direction === null ? this.state.sortDirection : direction;\r\n    if (toDirection === \"desc\") {\r\n      newData.reverse();\r\n    }\r\n\r\n    return newData;\r\n  }\r\n\r\n  clickSortHeader(item) {\r\n    const isChain = [\r\n      \"BNB\",\r\n      \"BTC\",\r\n      \"ETH\",\r\n      \"LTC\",\r\n      \"BCH\",\r\n      \"DOGE\",\r\n      \"GAIA\",\r\n      \"AVAX\",\r\n      \"BSC\",\r\n    ].includes(item);\r\n    const direction =\r\n      this.state.sortBy !== item\r\n        ? \"desc\"\r\n        : this.state.sortDirection === \"desc\"\r\n        ? \"asc\"\r\n        : \"desc\";\r\n    this.setState(\r\n      { sortBy: item, sortDirection: direction, sortChain: isChain },\r\n      () => this.setData()\r\n    );\r\n    window.setTimeout(() => {}, 200);\r\n  }\r\n\r\n  sortColour(item) {\r\n    return \"#ffffff\";\r\n  }\r\n\r\n  whichHeart(address) {\r\n    return this.state.myFavNodes.includes(address) ? heartFull : heartBlank;\r\n  }\r\n\r\n  handleNodePosition = async (node_address) => {\r\n    this.setState({ isPopoverOpen: true });\r\n    const url = `https://api.liquify.com/thor/api/grabPosition=${node_address}`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const rawData = await response.json();\r\n      if (!rawData || Object.keys(rawData).length === 0) {\r\n        this.setState({ chartData: null });\r\n      } else {\r\n        const maxData = Object.entries(rawData).map(([x, y]) => ({\r\n          x: Number(x),\r\n          y: Number(y.max),\r\n        }));\r\n\r\n        const positionData = Object.entries(rawData).map(([x, y]) => ({\r\n          x: Number(x),\r\n          y: Number(y.position),\r\n        }));\r\n\r\n        const allXValues = [...maxData, ...positionData].map(\r\n          (dataPoint) => dataPoint.x\r\n        );\r\n        const minX = Math.min(...allXValues);\r\n        const maxX = Math.max(...allXValues);\r\n\r\n        this.setState({ maxData, positionData, minX, maxX });\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching data from ${url}:`, error);\r\n    }\r\n  };\r\n\r\n  handleClickSlashes = async (node_address) => {\r\n    this.setState({ isPopoverOpen: true });\r\n    const url = `https://api.liquify.com/thor/api/grabSlashes=${node_address}`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const rawData = await response.json();\r\n      if (!rawData || Object.keys(rawData).length === 0) {\r\n        this.setState({ chartData: null });\r\n      } else {\r\n        const chartData = Object.entries(rawData).map(([x, y]) => ({\r\n          x: Number(x),\r\n          y: Number(y),\r\n        }));\r\n        this.setState({ chartData });\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching data from ${url}:`, error);\r\n    }\r\n  };\r\n\r\n  handleMaxEffectiveStake = async () => {\r\n    this.setState({ isPopoverOpen: true });\r\n    const url = `https://api.liquify.com/thor/api/maxEffectiveStake`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const rawData = await response.json();\r\n      if (!rawData || Object.keys(rawData).length === 0) {\r\n        this.setState({ chartData: null });\r\n      } else {\r\n        const chartData = Object.entries(rawData).map(([x, y]) => ({\r\n          x: Number(x),\r\n          y: Math.round(Number(y) / 100000000),\r\n        }));\r\n\r\n        this.setState({ chartData });\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching data from ${url}:`, error);\r\n    }\r\n  };\r\n\r\n  handleClickTotalBond = async () => {\r\n    this.setState({ isPopoverOpen: true });\r\n    const url = `https://api.liquify.com/thor/api/totalBond`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const rawData = await response.json();\r\n      if (!rawData || Object.keys(rawData).length === 0) {\r\n        this.setState({ chartData: null });\r\n      } else {\r\n        const chartData = Object.entries(rawData).map(([x, y]) => ({\r\n          x: Number(x),\r\n          y: Math.round(Number(y) / 100000000),\r\n        }));\r\n\r\n        this.setState({ chartData });\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching data from ${url}:`, error);\r\n    }\r\n  };\r\n\r\n  handleClickRewards = async (node_address) => {\r\n    this.setState({ isPopoverOpen: true });\r\n    const url = `https://api.liquify.com/thor/api/grabRewards=${node_address}`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const rawData = await response.json();\r\n      if (!rawData || Object.keys(rawData).length === 0) {\r\n        this.setState({ chartData: null });\r\n      } else {\r\n        const chartData = Object.entries(rawData).map(([x, y]) => ({\r\n          x: Number(x),\r\n          y: Math.round(Number(y) / 100000000),\r\n        }));\r\n        this.setState({ chartData });\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching data from ${url}:`, error);\r\n    }\r\n  };\r\n\r\n  handleClickBond = async (node_address) => {\r\n    this.setState({ isPopoverOpen: true });\r\n    const url = `https://api.liquify.com/thor/api/grabBond=${node_address}`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const rawData = await response.json();\r\n      if (!rawData || Object.keys(rawData).length === 0) {\r\n        this.setState({ chartData: null });\r\n      } else {\r\n        const chartData = Object.entries(rawData).map(([x, y]) => ({\r\n          x: Number(x),\r\n          y: Math.round(Number(y) / 100000000),\r\n        }));\r\n        this.setState({ chartData });\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching data from ${url}:`, error);\r\n    }\r\n  };\r\n\r\n  searchBar() {\r\n    return (\r\n      <div className=\"search-input\">\r\n        <Input\r\n          style={{\r\n            width: 500,\r\n            height: 46,\r\n            borderRadius: 6,\r\n            background: \"#fff\",\r\n          }}\r\n          onChange={(event) =>\r\n            this.setState(\r\n              { searchTerm: event.target.value.trim().toLowerCase() },\r\n              () => this.setData()\r\n            )\r\n          }\r\n          prefix={<SearchOutlined />}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      data,\r\n      nodesFilter,\r\n      visibleColumns,\r\n      activeNodes,\r\n      standByNodes,\r\n      whitelistedNodes,\r\n    } = this.state;\r\n\r\n    const noNodesFilter =\r\n      !nodesFilter.active && !nodesFilter.standby && !nodesFilter.orthers;\r\n    const showActive =\r\n      isEmpty(nodesFilter) || noNodesFilter || nodesFilter.active;\r\n    const showStandby =\r\n      isEmpty(nodesFilter) || noNodesFilter || nodesFilter.standby;\r\n    const showOthers =\r\n      isEmpty(nodesFilter) || noNodesFilter || nodesFilter.orthers;\r\n\r\n    const chartDataConfig = this.state.chartData\r\n      ? {\r\n          datasets: [\r\n            {\r\n              label: \"Value\",\r\n              data: this.state.chartData,\r\n              fill: false,\r\n              backgroundColor: \"rgb(28, 57, 182)\",\r\n              borderColor: \"rgba(28, 57, 187, 0.2)\",\r\n              tension: 0,\r\n            },\r\n          ],\r\n        }\r\n      : {};\r\n\r\n    const maxPositionChartDataConfig =\r\n      this.state.maxData && this.state.positionData\r\n        ? {\r\n            datasets: [\r\n              {\r\n                label: \"Max\",\r\n                data: this.state.maxData,\r\n                backgroundColor: \"blue\",\r\n                pointRadius: 5,\r\n              },\r\n              {\r\n                label: \"Position\",\r\n                data: this.state.positionData,\r\n                backgroundColor: \"orange\",\r\n                pointRadius: 5,\r\n              },\r\n            ],\r\n          }\r\n        : {};\r\n\r\n    const maxStakeOptions = this.state.chartData\r\n      ? {\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                type: \"linear\",\r\n                position: \"bottom\",\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: \"Block Height\",\r\n                },\r\n                ticks: {\r\n                  autoSkip: true,\r\n                  maxTicksLimit: 10,\r\n                  min: Math.min(...this.state.chartData.map((data) => data.x)),\r\n                  max: Math.max(...this.state.chartData.map((data) => data.x)),\r\n                  stepSize: 20000,\r\n                  callback: function (value) {\r\n                    return value;\r\n                  },\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: \"Max Effective Stake (ᚱ)\",\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        }\r\n      : {};\r\n\r\n    const totalBondOptions = this.state.chartData\r\n      ? {\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                type: \"linear\",\r\n                position: \"bottom\",\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: \"Block Height\",\r\n                },\r\n                ticks: {\r\n                  autoSkip: true,\r\n                  maxTicksLimit: 10,\r\n                  min: Math.min(...this.state.chartData.map((data) => data.x)),\r\n                  max: Math.max(...this.state.chartData.map((data) => data.x)),\r\n                  stepSize: 20000,\r\n                  callback: function (value) {\r\n                    return value;\r\n                  },\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: \"Total Bond Amount (ᚱ)\",\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        }\r\n      : {};\r\n\r\n    const maxPositionOptions = this.state.chartData\r\n      ? {\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                type: \"linear\",\r\n                position: \"bottom\",\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: \"Block Height\",\r\n                },\r\n                ticks: {\r\n                  autoSkip: true,\r\n                  maxTicksLimit: 10,\r\n                  min: this.state.minX,\r\n                  max: this.state.maxX,\r\n                  stepSize: 20000,\r\n                  callback: function (value) {\r\n                    return value;\r\n                  },\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: \"Position\",\r\n                },\r\n                ticks: {\r\n                  min: 0,\r\n                  max: 100,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        }\r\n      : {};\r\n\r\n    const slashesOptions = this.state.chartData\r\n      ? {\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                type: \"linear\",\r\n                position: \"bottom\",\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: \"Block Height\",\r\n                },\r\n                ticks: {\r\n                  callback: function (value, index, values) {\r\n                    return value;\r\n                  },\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: \"Slashes Value\",\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        }\r\n      : {};\r\n\r\n    const rewardsOptions = this.state.chartData\r\n      ? {\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                type: \"linear\",\r\n                position: \"bottom\",\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: \"Block Height\",\r\n                },\r\n                ticks: {\r\n                  callback: function (value, index, values) {\r\n                    return value;\r\n                  },\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: \"Reward Amount (ᚱ)\",\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        }\r\n      : {};\r\n\r\n    const bondOptions = this.state.chartData\r\n      ? {\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                type: \"linear\",\r\n                position: \"bottom\",\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: \"Block Height\",\r\n                },\r\n                ticks: {\r\n                  autoSkip: true,\r\n                  maxTicksLimit: 10,\r\n                  min: Math.min(...this.state.chartData.map((data) => data.x)),\r\n                  stepSize: 20000,\r\n                  callback: function (value, index, values) {\r\n                    return value;\r\n                  },\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: \"Bond Amount (ᚱ)\",\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        }\r\n      : {};\r\n\r\n    return (\r\n      <Layout>\r\n        <Header\r\n          style={{\r\n            color: \"white\",\r\n            fontSize: 25,\r\n            fontWeight: 700,\r\n            minWidth: 1580,\r\n            height: 110,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div className=\"header-left\">\r\n            <img\r\n              alt=\"#\"\r\n              src={thornode}\r\n              style={{ width: 55, height: 55, margin: \"auto 22px auto 0\" }}\r\n            />\r\n            <span>Thornode Monitor</span>\r\n          </div>\r\n          <div className=\"header-right\">\r\n            <div\r\n              className={`active-node ${\r\n                nodesFilter.active ? \"active-node--active\" : null\r\n              }`}\r\n              onClick={() => this.onNodesFilter(\"active\")}\r\n            >\r\n              <img src={activeIcon} />\r\n            </div>\r\n            <div\r\n              className={`active-node ${\r\n                nodesFilter.standby ? \"active-node--active\" : null\r\n              }`}\r\n              onClick={() => this.onNodesFilter(\"standby\")}\r\n            >\r\n              <img src={powerIcon} />\r\n            </div>\r\n            <div\r\n              className={`active-node ${\r\n                nodesFilter.orthers ? \"active-node--active\" : null\r\n              }`}\r\n              onClick={() => this.onNodesFilter(\"orthers\")}\r\n            >\r\n              <img src={threeDotsIcon} />\r\n            </div>\r\n          </div>\r\n        </Header>\r\n        <Content style={{ padding: 40, backgroundColor: \"white\" }}>\r\n          {loading && (\r\n            <div className=\"loading\">\r\n              <img src={loadingIcon} className=\"loading_icon\" />\r\n            </div>\r\n          )}\r\n\r\n          {!loading && (\r\n            <div className=\"layout-content-wrapper\">\r\n              <Breadcrumb separator={<RightOutlined />}>\r\n                <Breadcrumb.Item href=\"/\">Dashboard</Breadcrumb.Item>\r\n                <Breadcrumb.Item className=\"current\">\r\n                  Active Nodes\r\n                </Breadcrumb.Item>\r\n              </Breadcrumb>\r\n\r\n              <div className=\"overview-list-wrapper\">\r\n                <div className=\"overview-list\">\r\n                  <GlobalData\r\n                    state={this.state}\r\n                    globalData={this.state.globalData}\r\n                    animateBlockCount={this.state.animateBlockCount}\r\n                    handleClickTotalBond={this.handleClickTotalBond}\r\n                    chartDataConfig={chartDataConfig}\r\n                    totalBondOptions={totalBondOptions}\r\n                    maxStakeOptions={maxStakeOptions}\r\n                    handlePopoverVisibility={this.handlePopoverVisibility}\r\n                    handleMaxEffectiveStake={this.handleMaxEffectiveStake}\r\n                  />\r\n                  <CoinGeckoData globalData={this.state.globalData} />\r\n                </div>\r\n              </div>\r\n\r\n              {showActive && (\r\n                <>\r\n                  <div className=\"cta-wrapper\">\r\n                    <div className=\"cta-link\">\r\n                      <Link to={PUBLIC_ROUTE.ACTIVE_DASHBOARD}>\r\n                        <Button type=\"primary\" className=\"uppercase\">\r\n                          Active nodes\r\n                        </Button>\r\n                      </Link>\r\n                    </div>\r\n                    {this.searchBar()}\r\n\r\n                    <VisibleColumn\r\n                      initialConfig={visibleColumns}\r\n                      onConfigUpdate={this.onColumnUpdate.bind(this)}\r\n                    />\r\n                  </div>\r\n\r\n                  {activeNodes.length > 0 && (\r\n                    <NodeTable\r\n                      visibleColumns={visibleColumns}\r\n                      whichHeart={this.whichHeart.bind(this)}\r\n                      addToFav={this.addToFav.bind(this)}\r\n                      nodeData={activeNodes}\r\n                      clickSortHeader={this.clickSortHeader.bind(this)}\r\n                      handleClickBond={this.handleClickBond}\r\n                      handleClickRewards={this.handleClickRewards}\r\n                      handleClickSlashes={this.handleClickSlashes}\r\n                      sortColour={this.sortColour.bind(this)}\r\n                      maxChainHeights={this.state.maxChainHeights}\r\n                      chains={true}\r\n                      sortBy={this.state.sortBy}\r\n                      sortDirection={this.state.sortDirection}\r\n                      chartDataConfig={chartDataConfig}\r\n                      bondOptions={bondOptions}\r\n                      rewardsOptions={rewardsOptions}\r\n                      slashesOptions={slashesOptions}\r\n                      handlePopoverVisibility={this.handlePopoverVisibility}\r\n                      handleNodePosition={this.handleNodePosition}\r\n                      maxPositionChartDataConfig={maxPositionChartDataConfig}\r\n                      maxPositionOptions={maxPositionOptions}\r\n                    />\r\n                  )}\r\n                  {activeNodes.length === 0 && (\r\n                    <div className=\"no-data\">\r\n                      <div className=\"no-data__content\">\r\n                        No Active Data Available!\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <br />\r\n                </>\r\n              )}\r\n\r\n              {showStandby && (\r\n                <>\r\n                  <div className=\"cta-wrapper\">\r\n                    <div className=\"cta-link\">\r\n                      <Link to={PUBLIC_ROUTE.STANDBY_DASHBOARD}>\r\n                        <Button type=\"primary\" className=\"uppercase\">\r\n                          Standby nodes\r\n                        </Button>\r\n                      </Link>\r\n                    </div>\r\n\r\n                    {!showActive && (\r\n                      <>\r\n                        {this.searchBar()}\r\n                        <VisibleColumn\r\n                          initialConfig={visibleColumns}\r\n                          onConfigUpdate={this.onColumnUpdate.bind(this)}\r\n                        />\r\n                      </>\r\n                    )}\r\n                  </div>\r\n\r\n                  {standByNodes.length > 0 && (\r\n                    <NodeTable\r\n                      visibleColumns={visibleColumns}\r\n                      whichHeart={this.whichHeart.bind(this)}\r\n                      addToFav={this.addToFav.bind(this)}\r\n                      nodeData={standByNodes}\r\n                      clickSortHeader={this.clickSortHeader.bind(this)}\r\n                      handleClickBond={this.handleClickBond}\r\n                      handleClickRewards={this.handleClickRewards}\r\n                      handleClickSlashes={this.handleClickSlashes}\r\n                      sortColour={this.sortColour.bind(this)}\r\n                      maxChainHeights={this.state.maxChainHeights}\r\n                      chains={false}\r\n                      sortBy={this.state.sortBy}\r\n                      sortDirection={this.state.sortDirection}\r\n                      chartDataConfig={chartDataConfig}\r\n                      bondOptions={bondOptions}\r\n                      rewardsOptions={rewardsOptions}\r\n                      slashesOptions={slashesOptions}\r\n                      handlePopoverVisibility={this.handlePopoverVisibility}\r\n                      handleNodePosition={this.handleNodePosition}\r\n                      maxPositionChartDataConfig={maxPositionChartDataConfig}\r\n                      maxPositionOptions={maxPositionOptions}\r\n                    />\r\n                  )}\r\n                  {standByNodes.length === 0 && (\r\n                    <div className=\"no-data\">\r\n                      <div className=\"no-data__content\">\r\n                        No Standby Data Available!\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <br />\r\n                </>\r\n              )}\r\n              {showOthers && (\r\n                <>\r\n                  <div className=\"cta-wrapper\">\r\n                    <div className=\"cta-link\">\r\n                      <Link to={PUBLIC_ROUTE.OTHER_DASHBOARD}>\r\n                        <Button type=\"primary\" className=\"uppercase\">\r\n                          Other nodes\r\n                        </Button>\r\n                      </Link>\r\n                    </div>\r\n\r\n                    {!showActive && !showStandby && (\r\n                      <>\r\n                        {this.searchBar()}\r\n                        <VisibleColumn\r\n                          initialConfig={visibleColumns}\r\n                          onConfigUpdate={this.onColumnUpdate.bind(this)}\r\n                        />\r\n                      </>\r\n                    )}\r\n                  </div>\r\n\r\n                  {whitelistedNodes.length > 0 && (\r\n                    <NodeTable\r\n                      visibleColumns={visibleColumns}\r\n                      whichHeart={this.whichHeart.bind(this)}\r\n                      addToFav={this.addToFav.bind(this)}\r\n                      nodeData={whitelistedNodes}\r\n                      clickSortHeader={this.clickSortHeader.bind(this)}\r\n                      handleClickBond={this.handleClickBond}\r\n                      handleClickRewards={this.handleClickRewards}\r\n                      handleClickSlashes={this.handleClickSlashes}\r\n                      sortColour={this.sortColour.bind(this)}\r\n                      maxChainHeights={this.state.maxChainHeights}\r\n                      chains={false}\r\n                      sortBy={this.state.sortBy}\r\n                      sortDirection={this.state.sortDirection}\r\n                      chartDataConfig={chartDataConfig}\r\n                      bondOptions={bondOptions}\r\n                      rewardsOptions={rewardsOptions}\r\n                      slashesOptions={slashesOptions}\r\n                      handlePopoverVisibility={this.handlePopoverVisibility}\r\n                      handleNodePosition={this.handleNodePosition}\r\n                      maxPositionChartDataConfig={maxPositionChartDataConfig}\r\n                      maxPositionOptions={maxPositionOptions}\r\n                    />\r\n                  )}\r\n                  {whitelistedNodes.length === 0 && (\r\n                    <div className=\"no-data\">\r\n                      <div className=\"no-data__content\">\r\n                        No Other Data Available!\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n          )}\r\n        </Content>\r\n        <Footer>\r\n          <a\r\n            href=\"https://github.com/liquify-validation\"\r\n            target=\"_blank\"\r\n            className=\"link\"\r\n          >\r\n            <img alt=\"#\" src={githubIcon} className=\"overview-item__icon\" />\r\n          </a>\r\n          <a\r\n            href=\"https://twitter.com/Liquify_ltd\"\r\n            target=\"_blank\"\r\n            className=\"link\"\r\n          >\r\n            <img alt=\"#\" src={twitterIcon} className=\"overview-item__icon\" />\r\n          </a>\r\n          <div className=\"logo-wrapper\">\r\n            <span>Built by:</span>\r\n            <img alt=\"#\" src={liquifyLogo} className=\"overview-item__icon\" />\r\n          </div>\r\n        </Footer>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n"],"names":["leaveIcon","_jsxs","style","marginTop","focusable","preserveAspectRatio","xmlns","fill","width","height","viewBox","className","children","_jsx","d","Header","_Layout","Footer","Content","headerStyle","cursor","padding","fontSize","color","backgroundColor","fontWeight","tdStyle","minWidth","textAlign","trStyle","iconStyle","paddingLeft","paddingRight","copyToClipWithPopup","_x","_x2","_copyToClipWithPopup","_asyncToGenerator","_regeneratorRuntime","mark","_callee","msg","ip","wrap","_context","prev","next","copyToClipboard","popUpModal","stop","apply","arguments","str","navigator","clipboard","writeText","Promise","reject","Modals","info","title","content","ModalContent","concat","onOk","okText","cancelText","SortIcon","_ref","column","sortBy","sortDirection","src","arrowDownIcon","Icons","_ref2","address","ip_address","addToFav","whichHeart","firstURL","secondURL","marginLeft","Popover","trigger","href","target","rel","verticalAlign","stroke","onClick","alt","GlobalData","_ref3","_globalData$coingecko","_globalData$coingecko2","_globalData$coingecko3","_globalData$coingecko4","_chartDataConfig$data","_chartDataConfig$data2","_chartDataConfig$data3","_chartDataConfig$data4","_globalData$timeUntil","_globalData$timeUntil2","_globalData$timeUntil3","globalData","state","animateBlockCount","handleClickTotalBond","chartData","chartDataConfig","totalBondOptions","handlePopoverVisibility","handleMaxEffectiveStake","maxStakeOptions","timeToDisplay","msgTitle","churnTry","retiring","timeUntilRetry","days","hours","minutes","_globalData$timeUntil4","_globalData$timeUntil5","_globalData$timeUntil6","timeUntilChurn","_Fragment","blockIcon","parseInt","maxHeight","toLocaleString","churnsIcon","bondIcon","activeNodes","length","map","item","bond","reduce","marcketCapIcon","coingecko","market_cap","timeIcon","total_volume","datasets","data","CustomLineChart","options","JSON","stringify","overlayClassName","onVisibleChange","visible","verticalTopIcon","maxEffectiveStake","chartLineIcon","CoinGeckoData","_ref4","_globalData$coingecko5","_globalData$coingecko6","_globalData$coingecko7","_globalData$coingecko8","_globalData$coingecko9","_globalData$coingecko10","_globalData$coingecko11","runeUsdtIcon","current_price","highTradingIcon","high_24h","lowTradingIcon","low_24h","mcapRankIcon","market_cap_rank","totalSupplyIcon","total_supply","ReturnIspImage","_ref5","isp","imageAWS","imageDO","imageGCP","imageAZURE","imageHETZNER","imageVULTR","imageLeaseweb","imageDatacamp","imageComcast","imageChoopa","imageChartercoms","imageATandT","imageZenlayer","imageAljeel","imageHostinger","ChainTD","_ref6","chain","obchains","maxChainHeights","delta","isNaN","toString","BondProviderPopOver","_ref7","totalBond","a","b","index","display","justifyContent","bond_address","substring","toFixed","NodeTable","_ref8","nodeData","clickSortHeader","handleClickBond","handleClickRewards","handleClickSlashes","sortColour","chains","bondOptions","rewardsOptions","slashesOptions","maxPositionOptions","maxPositionChartDataConfig","handleNodePosition","_ref8$visibleColumns","visibleColumns","_objectSpread","defaulColumns","_ref8$sortBy","_ref8$sortDirection","_useState","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","_useState3","_useState4","itemsPerPage","setItemsPerPage","totalPages","Math","ceil","pageNumbers","i","push","handleClick","event","Number","id","renderPageNumbers","number","indexOfLastItem","indexOfFirstItem","currentItems","slice","getHeaderClassName","key","getCellClassName","_Select","defaultValue","showSearch","onChange","value","borderRadius","dropdownMatchSelectWidth","label","borderWidth","borderColor","borderStyle","marginRight","alignItems","binance","bitcoin","eth","litecoin","bitcoincash","dogecoin","gaia","avax","bsc","_maxPositionChartData","_chartDataConfig$data5","_chartDataConfig$data6","_chartDataConfig$data7","_chartDataConfig$data8","_chartDataConfig$data9","_chartDataConfig$data10","maxWidth","node_address","CustomScatterChart","DotChartOutlined","age","action","location","HistoryOutlined","bond_providers","providers","current_award","apy","slash_points","score","version","forced_to_leave","requested_to_leave","rpc","bifrost","prevPage","LeftOutlined","RightOutlined","timer","nodes","leave","rewards","slashes","bfr","BTC","BNB","ETH","LTC","BCH","DOGE","GAIA","AVAX","BSC","_default","_Component","_componentWillMount","_refreshData","_inherits","_super","_createSuper","props","_ref9","_ref14","_ref23","_ref26","_this","_classCallCheck","call","setState","isPopoverOpen","_x3","_callee2","url","response","rawData","maxData","positionData","allXValues","minX","maxX","_context2","fetch","sent","json","Object","keys","entries","_ref10","_ref11","x","y","max","_ref12","_ref13","position","_toConsumableArray","dataPoint","min","t0","console","error","_x4","_callee3","_context3","_ref15","_ref16","_callee4","_context4","_ref18","_ref19","round","_callee5","_context5","_ref21","_ref22","_x5","_callee6","_context6","_ref24","_ref25","_x6","_callee7","_context7","_ref27","_ref28","standByNodes","whitelistedNodes","myFavNodes","searchTerm","nodesFilter","loading","sortByChain","bind","_assertThisInitialized","_createClass","_callee8","tmp","_context8","getCookie","parse","this","refreshData","_callee9","_this2","_context9","abrupt","getData","setData","_this3","setInterval","clearInterval","_this4","singleAddress","setCookie","newFaveNodes","indexOf","newArrayWithRemove","filter","newFaveNodesNew","_this5","includes","bondProvidersString","_this6","newItems","fave","status","standbyNodes","maxVersion","active_standy_nodes","whitelisted","findChurnOuts","findChurnIns","returnSearchedData","activeNodesSorted","sortData","favActiveNodesSorted","standBySorted","whitelistedSorted","config","prevState","_defineProperty","over300","over300Sorted","under300","calcBadValidatorRedline","greater100Slashes","validatorLine","accumulator","object","parseFloat","BadValidatorRedline","_this7","undefined","direction","worst_perform","toSortBy","newData","sortChain","sort","deltaA","deltaB","localeCompare","aSorted","reverse","_this8","isChain","window","setTimeout","heartFull","heartBlank","_this9","_Input","background","trim","toLowerCase","prefix","SearchOutlined","_this10","_this$state","noNodesFilter","active","standby","orthers","showActive","isEmpty","showStandby","showOthers","tension","pointRadius","scales","xAxes","type","scaleLabel","labelString","ticks","autoSkip","maxTicksLimit","stepSize","callback","yAxes","values","thornode","margin","onNodesFilter","activeIcon","powerIcon","threeDotsIcon","loadingIcon","_Breadcrumb","separator","Item","Link","to","PUBLIC_ROUTE","ACTIVE_DASHBOARD","_Button","searchBar","VisibleColumn","initialConfig","onConfigUpdate","onColumnUpdate","STANDBY_DASHBOARD","OTHER_DASHBOARD","githubIcon","twitterIcon","liquifyLogo","Component","baseKeys","require","getTag","isArguments","isArray","isArrayLike","isBuffer","isPrototype","isTypedArray","hasOwnProperty","prototype","module","exports","splice","tag","size"],"sourceRoot":""}